Обязательное задание
-DONE Привяжи GitHub к тренажёру. Как только ты это сделаешь, в списке репозиториев автоматически появится qa_java. Там будет заготовка проекта, в которой нужно дописать код. Подробнее — в инструкции.
-DONE Собери Maven-проект: подключи Jacoco, Mockito и JUnit 4. Обрати внимание: нужно использовать Java 11.
-DONE Изолируй класс Lion от класса Feline.
@To isolate lion, make constructor which will send Feline object to Lion.
@Note that you shouldn't transfer one dependency using one constructor and another dependency using different constructor.
@Lion object will need both dependencies (Feline object and hasMane field) to work fine.
-Напиши моки с помощью Mockito. Какие именно понадобятся — определи самостоятельно.
@Don't mock primitives and Strings.
@There is a difficult place in the project related to usage of both mocks and parameters. You cannot combine several
@annotations under @RunWith(...). You can use parameterized runner and initialize all mocks explicitly using
-Напиши тесты на классы Feline, Cat и Lion.
-Подумай, где можно применить параметризацию. Реализуй параметризованные тесты.
@Make parameterized tests for class Lion with different sex as a parameter. Parameterized tests should be a separate class.
-Оцени покрытие с помощью Jacoco: оно должно быть 100%.

Дополнительное задание
-Cоздай класс льва Алекса из мультфильма «Мадагаскар». Он будет наследником обычного льва.
-Помимо обычных методов у него есть свои:
-getFriends() возвращает список имён его друзей — зебры Марти, бегемотихи Глории и жирафа Мелман;
-getPlaceOfLiving() возвращает место, где он живёт — Нью-Йоркский зоопарк.
-Также нужно переопределить метод getKittens(), потому что у Алекса нет львят. А ещё — написать свой конструктор, так как в классе Lion нет дефолтного конструктора. Алекс самец, поэтому в конструктор класса Lion всегда будет передаваться одно и то же значение.
-Покрой тестами созданный класс.

Как будут оценивать твою работу
Для основного задания
-Нейминг элементов корректный. Если не помнишь правила, посмотри в шпаргалку.
-В pom.xml подключены Jacoco, Mockito и JUnit.
-В pom.xml нет ничего лишнего.
-Тесты лежат в src/test/java.
-Класс Lion изолирован от класса Feline.
-В тестах используются моки.
-В тестах используется параметризация.
-Классы Feline, Cat и Lion покрыты тестами на 100%.
-Сделан отчёт с помощью Jacoco. Не забудь закоммитить отчёт. Открой консоль, перейди в папку проекта и выполни команды:
# добавляем папку с отчетом Jacoco к отслеживаемым файлам. Ключ -f пригодится, если папка target указана в .gitignore
git add -f .\target\site\jacoco\.
# выполняем коммит
git commit -m "add jacoco report"
# отправляем файлы в удалённый репозиторий
git push
В проекте используется Java 11.

Для дополнительного задания
-Написан дополнительный класс — лев Алекс.
-Класс лев Алекс покрыт тестами на 100%.
